{
	"id": "371419c8d4bf1eeac0550187fc547870",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.24",
	"solcLongVersion": "0.8.24+commit.e11b9ed9",
	"input": {
		"language": "Solidity",
		"sources": {
			"dex/contracts/TokenSale.sol": {
				"content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.24;\n\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n// import \"./SolarGreen.sol\";\n\n// contract TokenSale is  Ownable {\n//     IERC20 public token;\n//     uint256 public tokenPrice;\n//     uint256 public saleStartTime;\n//     uint256 public saleEndTime;\n//     uint256 public tokensSold;\n//     uint256 public maxPurchasePerWallet;\n\n//     mapping(address => uint256) public purchasedTokens;\n\n//     event TokensPurchased(address indexed buyer, uint256 amount);\n\n//     constructor(\n//         address _tokenAddress,\n//         uint256 _tokenPrice,\n//         uint256 _saleDuration,\n//         uint256 _maxPurchasePerWallet\n//     ) {\n//         token = IERC20(_tokenAddress);\n//         tokenPrice = _tokenPrice;\n//         saleStartTime = block.timestamp;\n//         saleEndTime = saleStartTime + _saleDuration;\n//         maxPurchasePerWallet = _maxPurchasePerWallet;\n//         Ownable.initialize(msg.sender);\n//     }\n\n//     function buyTokens(uint256 _tokenAmount) external {\n//         require(block.timestamp >= saleStartTime && block.timestamp <= saleEndTime, \"Token sale is not active\");\n//         require(tokensSold + _tokenAmount <= token.balanceOf(address(this)), \"Insufficient tokens available for sale\");\n//         require(purchasedTokens[msg.sender] + _tokenAmount <= maxPurchasePerWallet, \"Exceeds maximum purchase limit\");\n\n//         uint256 cost = _tokenAmount * tokenPrice;\n//         require(cost <= address(msg.sender).balance, \"Insufficient funds\");\n\n//         token.transfer(msg.sender, _tokenAmount);\n//         tokensSold += _tokenAmount;\n//         purchasedTokens[msg.sender] += _tokenAmount;\n\n//         emit TokensPurchased(msg.sender, _tokenAmount);\n//     }\n\n//     function withdrawFunds() external onlyOwner {\n//         payable(owner()).transfer(address(this).balance);\n//     }\n\n//     function withdrawUnsoldTokens() external onlyOwner {\n//         uint256 unsoldTokens = token.balanceOf(address(this)) - tokensSold;\n//         token.transfer(owner(), unsoldTokens);\n//     }\n// }\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"errors": [
			{
				"component": "general",
				"errorCode": "3420",
				"formattedMessage": "Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.24;\"\n--> dex/contracts/TokenSale.sol\n\n",
				"message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.24;\"",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "dex/contracts/TokenSale.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"dex/contracts/TokenSale.sol": {
				"ast": {
					"absolutePath": "dex/contracts/TokenSale.sol",
					"exportedSymbols": {},
					"id": 1,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [],
					"src": "2150:0:0"
				},
				"id": 0
			}
		}
	}
}